// Functional Transfer + Landing + Landing 2
clearscreen.
print ("Automated Moon Intercept System Activated...").


function main {
  
  
  doTransfer ().
     
  print ("Maneuver Complete...").
  
  doLanding ().
  
  print ("Landing Complete...").
  //print "It ran!".
 doLadning2 ()

 print ("Landing 2 Complete...").

}



function protectFromPast {
  parameter originalFunction.
  local replacementFunction is {
    parameter data.
    if data[0] < time:seconds + 15 {
      return 2^64.
    } else {
      return originalFunction(data).
    }
  }.
  return replacementFunction@.
}

function doTransfer {  
   local startSearchTime is ternarySearch(
        angleToMun@,
        time:seconds + 30,
        time:seconds + 30 + orbit:period,
        1
    ).
   print ("Transfer Being Calculated...").
   local transfer is list(startSearchTime,0 ,0 ,0).
   set transfer to improveConverge(transfer, protectFromPast (munTransferScore@)).
   
   print ("Maneuver Being Executed...").
   executeManeuver(transfer).
   wait 5.
   
   
   warpto(time:seconds + obt:nextpatchEta - 1).
   wait until body = Mun.
   wait 1.
}

function angleToMun {
    parameter t.
    return vectorangle(
        Kerbin:position - positionAT(ship,t),
        Kerbin:position - positionAT(Mun,t)
    ).
}

function eccentricityScore {
  parameter data.
  local mnv is node(time:seconds + eta:apoapsis, 0, 0, data[0]).
  addManeuverToFlightPlan(mnv).
  local result is mnv:orbit:eccentricity.
  removeManeuverFromFlightPlan(mnv).
  return result.
}



function executeManeuver {
  parameter mList.
  local mnv is node(mList[0], mList[1], mList[2], mList[3]).
  addManeuverToFlightPlan(mnv).
  local startTime is calculateStartTime(mnv).
  warpto(startTime - 20).
  wait until time:seconds > startTime - 10.
  lockSteeringAtManeuverTarget(mnv).
  wait until time:seconds > startTime.
  lock throttle to 1.
  until isManeuverComplete(mnv) {
    doAutoStage().
  }
  lock throttle to 0.
  unlock steering.
  removeManeuverFromFlightPlan(mnv).
}

function addManeuverToFlightPlan {
  parameter mnv.
  add mnv.
}

function calculateStartTime {
  parameter mnv.
  return time:seconds + mnv:eta - maneuverBurnTime(mnv) / 2.
}

function maneuverBurnTime {
  parameter mnv.
  local dV is mnv:deltaV:mag.
  local g0 is 9.80665.
  local isp is 0.

  list engines in myEngines.
  for en in myEngines {
    if en:ignition and not en:flameout {
      set isp to isp + (en:isp * (en:availableThrust / ship:availableThrust)).
    }
  }

  local mf is ship:mass / constant():e^(dV / (isp * g0)).
  local fuelFlow is ship:availableThrust / (isp * g0).
  local t is (ship:mass - mf) / fuelFlow.

  return t.
}

function lockSteeringAtManeuverTarget {
  parameter mnv.
  lock steering to mnv:burnvector.
}

function isManeuverComplete {
  parameter mnv.
  if not(defined originalVector) or originalVector = -1 {
    declare global originalVector to mnv:burnvector.
  }
  if vang(originalVector, mnv:burnvector) > 90 {
    declare global originalVector to -1.
    return true.
  }
  return false.
}

function removeManeuverFromFlightPlan {
  parameter mnv.
  remove mnv.
}


function ternarySearch {
    parameter f,left,right,absolutePrecision.
    until false {
        if abs(right - left) < absolutePrecision {
            return (left + right) / 2.
        }
        local leftThird is left + (right-left) / 3.
        local rightThird is right - (right - left) / 3.
        if f(leftThird) < f (rightThird) {
            set left to leftThird.

        }   else {
            set right to rightThird.
        }
    }
}

function distanceToMunAtApoapsis {
    parameter mnv.
    local apoapsisTime is ternarySearch(
        altitudeAt@,
        time:seconds + mnv:eta,
        time:seconds + mnv:eta + (mnv:orbit:period / 2),
        1
    ).
          
    return(positionAt(ship,apoapsisTime) - positionAt(Mun, apoapsisTime)):mag.
}   

function altitudeAt {
    parameter t.
    return Kerbin:altitudeOf(positionAT(ship,t)).

}


function doShutdown {
  lock throttle to 0.
  lock steering to prograde.
}

function doSafeStage {
  wait until stage:ready.
  stage.
}

function munTransferScore {
    parameter data.
    local mnv is node (data[0],data[1],data[2],data[3]).   
    addManeuverToFlightPlan(mnv).
    local result is 0.
    if mnv:orbit:hasNextPatch {
        set result to mnv:orbit:NextPatch:Periapsis.
        
    } else {
        set result to distanceToMunAtApoapsis(mnv).
    }
    removeManeuverFromFlightPlan(mnv).
    return result.
}

function doLanding {
    
  clearscreen.
  set radarOffset to 9.184.	 				// The value of alt:radar when landed (on gear)
  lock trueRadar to alt:radar - radarOffset.			// Offset radar to get distance from gear to ground
  lock g to constant:g * body:mass / body:radius^2.		// Gravity (m/s^2)
  lock maxDecel to (ship:availablethrust / ship:mass) - g.	// Maximum deceleration possible (m/s^2)
  lock stopDist to ship:verticalspeed^2 / (2 * maxDecel) + 10.		// The distance the burn will require
  lock idealThrottle to stopDist / trueRadar.			// Throttle required for perfect hoverslam
  lock impactTime to trueRadar / abs(ship:verticalspeed).		// Time until impact, used for landing gear

  set kuniverse:timewarp:rate to 1000.
  wait until altitude <= 200000.
  set kuniverse:timewarp:rate to 100.
  wait until altitude <= 180000.
  set kuniverse:timewarp:rate to 10.
  wait until altitude <= 170000.
  set kuniverse:timewarp:rate to 1.
  
  wait 5.
  sas on.
  wait 5.
  set sasmode to "RETROGRADE".
  wait until altitude < 80000.
  sas off.
  


  
  wait until ship:verticalspeed < -1.
    print "Preparing for hoverslam...".
    rcs on.    
    brakes on.
    lock steering to srfretrograde.
    when impactTime < 6 then {gear on.}

  wait until trueRadar < stopDist.
    print "Performing hoverslam".
    lock throttle to idealThrottle.
  
  
  
  wait until ship:verticalspeed > -0.01.
    print "Hoverslam completed".
    set ship:control:pilotmainthrottle to 0.
    rcs off.



}.

function doLanding2 {
stage.
set throttle to 1.
wait 2.
set steering to retrograde.
lock throttle to 0
clearscreen.
set radarOffset to 9.184.	 				// The value of alt:radar when landed (on gear)
lock trueRadar to alt:radar - radarOffset.			// Offset radar to get distance from gear to ground
lock g to constant:g * body:mass / body:radius^2.		// Gravity (m/s^2)
lock maxDecel to (ship:availablethrust / ship:mass) - g.	// Maximum deceleration possible (m/s^2)
lock stopDist to ship:verticalspeed^2 / (2 * maxDecel) + 10.		// The distance the burn will require
lock idealThrottle to stopDist / trueRadar.			// Throttle required for perfect hoverslam
lock impactTime to trueRadar / abs(ship:verticalspeed).		// Time until impact, used for landing gear

WAIT UNTIL ship:verticalspeed < -1.
    print "Preparing for hoverslam...".
    rcs on.    
    brakes on.
    lock steering to srfretrograde.
    when impactTime < 6 then {gear on.}

WAIT UNTIL trueRadar < stopDist.
    print "Performing hoverslam".
    lock throttle to idealThrottle.
  
  
  
WAIT UNTIL ship:verticalspeed > -0.01.
    print "Hoverslam completed".
    set ship:control:pilotmainthrottle to 0.
    rcs off.

}





main ().
